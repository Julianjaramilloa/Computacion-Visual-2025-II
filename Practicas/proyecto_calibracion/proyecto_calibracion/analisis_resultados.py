import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
import glob

def analizar_resultados():
    print("üìä Analizando resultados de calibraci√≥n...")
    
    # Cargar par√°metros
    try:
        mtx = np.load('resultados/camera_matrix.npy')
        dist = np.load('resultados/distortion_coeffs.npy')
    except FileNotFoundError:
        print("‚ùå Ejecuta calibracion.py primero")
        return
    
    # Mostrar par√°metros detallados
    print("\nüîç AN√ÅLISIS DETALLADO DE PAR√ÅMETROS:")
    
    fx, fy = mtx[0,0], mtx[1,1]
    cx, cy = mtx[0,2], mtx[1,2]
    
    print(f"Distancia focal X (fx): {fx:.2f} p√≠xeles")
    print(f"Distancia focal Y (fy): {fy:.2f} p√≠xeles")
    print(f"Centro √≥ptico X (cx): {cx:.2f} p√≠xeles") 
    print(f"Centro √≥ptico Y (cy): {cy:.2f} p√≠xeles")
    print(f"Relaci√≥n fx/fy: {fx/fy:.4f} (cercano a 1.0 es ideal)")
    
    print(f"\nCoeficientes de distorsi√≥n:")
    print(f"k1: {dist[0][0]:.6f} (distorsi√≥n radial principal)")
    print(f"k2: {dist[0][1]:.6f} (distorsi√≥n radial secundaria)")
    print(f"p1: {dist[0][2]:.6f} (distorsi√≥n tangencial)")
    print(f"p2: {dist[0][3]:.6f} (distorsi√≥n tangencial)")
    print(f"k3: {dist[0][4]:.6f} (distorsi√≥n radial terciaria)")
    
    # An√°lisis de calidad
    print(f"\n‚úÖ EVALUACI√ìN DE CALIDAD:")
    
    # Verificar proporci√≥n de p√≠xeles
    if abs(fx - fy) / fx < 0.05:
        print("üü¢ P√≠xeles aproximadamente cuadrados")
    else:
        print("üü° P√≠xeles no cuadrados - normal en algunas c√°maras")
    
    if abs(dist[0][0]) > 0.1:
        print("üü° Distorsi√≥n radial significativa detectada")
    else:
        print("üü¢ Distorsi√≥n radial baja")
    
    # Generar gr√°ficos comparativos
    generar_graficos_comparacion()
    
    # An√°lisis espec√≠fico de distorsi√≥n
    analizar_distorsion()
    
    # Generar reporte final
    generar_reporte_final()

def generar_graficos_comparacion():
    print("\nüìà Generando gr√°ficos comparativos...")
    
    # Buscar im√°genes de ejemplo
    images = glob.glob('imagenes_tablero/*.jpg') + glob.glob('imagenes_tablero/*.png')
    
    if not images:
        print("‚ùå No se encontraron im√°genes para comparaci√≥n")
        return
    
    # Usar m√°ximo 3 im√°genes para el an√°lisis
    images = images[:3]
    
    mtx = np.load('resultados/camera_matrix.npy')
    dist = np.load('resultados/distortion_coeffs.npy')
    
    # Crear figura para comparaci√≥n
    fig, axes = plt.subplots(len(images), 2, figsize=(15, 5*len(images)))
    
    # Manejar caso de una sola imagen
    if len(images) == 1:
        axes = axes.reshape(1, -1)
    
    for i, img_path in enumerate(images):
        print(f"Procesando imagen {i+1}/{len(images)} para comparaci√≥n...")
        
        # Cargar imagen
        img = cv2.imread(img_path)
        if img is None:
            continue
            
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        
        # Corregir distorsi√≥n
        h, w = img.shape[:2]
        newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))
        undistorted = cv2.undistort(img, mtx, dist, None, newcameramtx)
        undistorted_rgb = cv2.cvtColor(undistorted, cv2.COLOR_BGR2RGB)
        
        # Mostrar comparaci√≥n
        axes[i,0].imshow(img_rgb)
        axes[i,0].set_title(f'Original {i+1} - Con Distorsi√≥n', fontsize=12, fontweight='bold')
        axes[i,0].axis('off')
        
        # A√±adir l√≠neas de referencia para mostrar distorsi√≥n
        h_orig, w_orig = img_rgb.shape[:2]
        axes[i,0].axhline(y=h_orig//2, color='red', linestyle='--', alpha=0.7, linewidth=2)
        axes[i,0].axvline(x=w_orig//2, color='red', linestyle='--', alpha=0.7, linewidth=2)
        
        axes[i,1].imshow(undistorted_rgb)
        axes[i,1].set_title(f'Corregida {i+1} - Sin Distorsi√≥n', fontsize=12, fontweight='bold')
        axes[i,1].axis('off')
        
        # A√±adir l√≠neas de referencia en imagen corregida
        h_corr, w_corr = undistorted_rgb.shape[:2]
        axes[i,1].axhline(y=h_corr//2, color='green', linestyle='--', alpha=0.7, linewidth=2)
        axes[i,1].axvline(x=w_corr//2, color='green', linestyle='--', alpha=0.7, linewidth=2)
    
    plt.tight_layout()
    plt.savefig('resultados/comparacion_visual.png', dpi=150, bbox_inches='tight')
    plt.show()
    
    print("üíæ Gr√°fico guardado: resultados/comparacion_visual.png")

def analizar_distorsion():
    """An√°lisis espec√≠fico de los tipos de distorsi√≥n"""
    
    print("\nüîç AN√ÅLISIS DE DISTORSI√ìN:")
    
    dist = np.load('resultados/distortion_coeffs.npy')
    
    k1, k2, p1, p2, k3 = dist[0]
    
    # An√°lisis de distorsi√≥n radial
    if k1 > 0:
        print(f"üìä Distorsi√≥n radial: BARRIL (k1={k1:.4f})")
        print("   Las l√≠neas rectas se curvan hacia adentro en los bordes")
    elif k1 < 0:
        print(f"üìä Distorsi√≥n radial: COJ√çN (k1={k1:.4f})")
        print("   Las l√≠neas rectas se curvan hacia afuera en los bordes")
    else:
        print("üìä Sin distorsi√≥n radial significativa")
    
    # An√°lisis de distorsi√≥n tangencial
    if abs(p1) > 0.001 or abs(p2) > 0.001:
        print(f"üìä Distorsi√≥n tangencial detectada: p1={p1:.4f}, p2={p2:.4f}")
        print("   La imagen puede parecer ligeramente inclinada")
    else:
        print("üìä Distorsi√≥n tangencial m√≠nima")
    
    # Crear visualizaci√≥n de distorsi√≥n
    crear_mapa_distorsion()

def crear_mapa_distorsion():
    """Crear un mapa visual de la distorsi√≥n"""
    
    mtx = np.load('resultados/camera_matrix.npy')
    dist = np.load('resultados/distortion_coeffs.npy')
    
    # Crear una grilla de puntos
    h, w = 480, 640  # Dimensiones t√≠picas
    
    # Puntos de una grilla regular
    x, y = np.meshgrid(np.arange(0, w, 40), np.arange(0, h, 40))
    points = np.column_stack((x.ravel(), y.ravel())).astype(np.float32)
    
    # Simular correcci√≥n inversa (mostrar c√≥mo se distorsiona)
    points_undist = cv2.undistortPoints(
        points.reshape(-1, 1, 2), mtx, dist, None, mtx
    )
    points_undist = points_undist.reshape(-1, 2)
    
    # Crear visualizaci√≥n
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Grilla original (sin distorsi√≥n)
    ax1.scatter(points[:, 0], points[:, 1], c='blue', s=20, alpha=0.7)
    ax1.set_title('Grilla Ideal (Sin Distorsi√≥n)', fontweight='bold')
    ax1.set_xlim(0, w)
    ax1.set_ylim(0, h)
    ax1.invert_yaxis()
    ax1.grid(True, alpha=0.3)
    ax1.set_aspect('equal')
    
    # Grilla despu√©s de correcci√≥n
    ax2.scatter(points_undist[:, 0], points_undist[:, 1], c='red', s=20, alpha=0.7)
    ax2.set_title('Grilla Corregida', fontweight='bold')
    ax2.set_xlim(0, w)
    ax2.set_ylim(0, h)
    ax2.invert_yaxis()
    ax2.grid(True, alpha=0.3)
    ax2.set_aspect('equal')
    
    plt.tight_layout()
    plt.savefig('resultados/mapa_distorsion.png', dpi=150, bbox_inches='tight')
    plt.show()
    
    print("üíæ Mapa de distorsi√≥n guardado: resultados/mapa_distorsion.png")

def generar_reporte_final():
    """Genera un reporte completo en markdown"""
    
    print("\nüìã GENERANDO REPORTE FINAL...")
    
    # Leer par√°metros
    mtx = np.load('resultados/camera_matrix.npy')
    dist = np.load('resultados/distortion_coeffs.npy')
    
    fx, fy = mtx[0,0], mtx[1,1]
    cx, cy = mtx[0,2], mtx[1,2]
    k1, k2, p1, p2, k3 = dist[0]
    
    # Determinar tipo de distorsi√≥n
    tipo_distorsion = "BARRIL" if k1 > 0 else "COJ√çN" if k1 < 0 else "M√çNIMA"
    calidad = "EXCELENTE" if abs(k1) < 0.1 else "BUENA" if abs(k1) < 0.3 else "REGULAR"
    
    reporte = f"""# üéØ REPORTE FINAL - CALIBRACI√ìN DE C√ÅMARA

## üìã Resumen Ejecutivo

‚úÖ **Estado de la Calibraci√≥n**: {calidad}  
üìä **Tipo de Distorsi√≥n Principal**: {tipo_distorsion}  
üéØ **Error de Reproyecci√≥n**: Ver archivo de calibraci√≥n  

---

## üîç Par√°metros Intr√≠nsecos Obtenidos

### Matriz de C√°mara (K):
```
[{fx:8.2f}    0.00    {cx:6.2f}]
[   0.00   {fy:8.2f}    {cy:6.2f}]
[   0.00      0.00      1.00   ]
```

### Interpretaci√≥n:
- **Distancia Focal X**: {fx:.2f} p√≠xeles
- **Distancia Focal Y**: {fy:.2f} p√≠xeles  
- **Centro √ìptico**: ({cx:.1f}, {cy:.1f}) p√≠xeles
- **Relaci√≥n fx/fy**: {fx/fy:.4f} {'‚úÖ (p√≠xeles cuadrados)' if abs(fx/fy - 1) < 0.05 else '‚ö†Ô∏è (p√≠xeles rectangulares)'}

---

## üåÄ Coeficientes de Distorsi√≥n

| Coeficiente | Valor | Descripci√≥n |
|-------------|-------|-------------|
| k1 | {k1:8.6f} | Distorsi√≥n radial principal |
| k2 | {k2:8.6f} | Distorsi√≥n radial secundaria |
| p1 | {p1:8.6f} | Distorsi√≥n tangencial horizontal |
| p2 | {p2:8.6f} | Distorsi√≥n tangencial vertical |
| k3 | {k3:8.6f} | Distorsi√≥n radial terciaria |

### An√°lisis de Distorsi√≥n:
- **Tipo**: {tipo_distorsion} (k1 {'> 0' if k1 > 0 else '< 0' if k1 < 0 else '‚âà 0'})
- **Severidad**: {'ALTA' if abs(k1) > 0.3 else 'MODERADA' if abs(k1) > 0.1 else 'BAJA'}
- **Distorsi√≥n Tangencial**: {'PRESENTE' if abs(p1) > 0.001 or abs(p2) > 0.001 else 'M√çNIMA'}

---

## üìä Evaluaci√≥n de Calidad

### Criterios de Evaluaci√≥n:
- ‚úÖ **Detecci√≥n de Esquinas**: Autom√°tica con OpenCV
- ‚úÖ **Consistencia de Par√°metros**: Valores dentro de rangos esperados
- ‚úÖ **Correcci√≥n Visual**: L√≠neas rectas m√°s lineales despu√©s de calibraci√≥n
- {'‚úÖ' if abs(k1) < 0.2 else '‚ö†Ô∏è'} **Nivel de Distorsi√≥n**: {calidad.lower()}

### Recomendaciones:
{f'üü¢ La calibraci√≥n es {calidad.lower()} y lista para usar en aplicaciones.' if abs(k1) < 0.2 else 'üü° Considerar tomar m√°s im√°genes desde √°ngulos diversos para mejorar precisi√≥n.'}

---

## üéØ Aplicaciones Sugeridas

Con estos par√°metros puedes implementar:

1. **Correcci√≥n de Distorsi√≥n en Tiempo Real**
2. **Mediciones Precisas en Im√°genes**
3. **Realidad Aumentada**
4. **Reconstrucci√≥n 3D**
5. **Visi√≥n Est√©reo** (con segunda c√°mara calibrada)

---

## üìÅ Archivos Generados

| Archivo | Descripci√≥n |
|---------|-------------|
| `camera_matrix.npy` | Matriz de par√°metros intr√≠nsecos |
| `distortion_coeffs.npy` | Coeficientes de distorsi√≥n |
| `comparacion_visual.png` | Comparaci√≥n antes/despu√©s |
| `mapa_distorsion.png` | Visualizaci√≥n de la distorsi√≥n |
| `corners_detected_*.jpg` | Verificaci√≥n de detecci√≥n de esquinas |
| `REPORTE_FINAL.md` | Este reporte |

---

## üî¨ Conclusiones T√©cnicas

La calibraci√≥n {'fue exitosa y los par√°metros obtenidos son consistentes' if abs(k1) < 0.2 else 'requiere refinamiento adicional'}. 
{'La distorsi√≥n detectada es t√≠pica de c√°maras web/m√≥viles y puede corregirse efectivamente.' if abs(k1) < 0.3 else 'La alta distorsi√≥n indica la necesidad de m√°s im√°genes de calibraci√≥n.'}

**Fecha de Calibraci√≥n**: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    with open('resultados/REPORTE_FINAL.md', 'w', encoding='utf-8') as f:
        f.write(reporte)
    
    print("‚úÖ Reporte completo guardado: resultados/REPORTE_FINAL.md")

if __name__ == "__main__":
    analizar_resultados()